name: PHPStan (every 15min or manual, blame, dedupe issues, inline report)

on:
  schedule:
    - cron: '*/15 * * * *'
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  phpstan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # pełna historia dla git blame

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          coverage: none
          tools: composer

      - name: Install deps
        run: composer install --no-interaction --no-progress --prefer-dist

      - name: Run PHPStan (JSON output)
        id: stan
        shell: bash
        continue-on-error: true
        run: |
          set +e
          ./vendor/bin/phpstan analyse --no-progress --memory-limit=1G --error-format=json src | tee phpstan-report.json
          code=${PIPESTATUS[0]}
          echo "exitcode=$code" >> "$GITHUB_OUTPUT"
          set -e

      - name: Build annotated report with git blame (inline only, no artifacts)
        if: steps.stan.outputs.exitcode != '0'
        env:
          WORKROOT: ${{ github.workspace }}
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            echo "jq not found"; exit 1
          fi

          # Wyciągnij (plik, linia, wiadomość) z raportu PHPStan
          jq -r '
            .files
            | to_entries[]
            | .key as $file
            | (.value.messages // [])
            | .[]
            | [$file, (.line // 0), (.message // "")]
            | @tsv
          ' phpstan-report.json > phpstan-flat.tsv || true

          # Zbuduj raport z blame; ścieżki na względne (czytelniejsze w issue)
          : > phpstan-annotated.txt
          if [ -s phpstan-flat.tsv ]; then
            while IFS=$'\t' read -r file line msg; do
              relfile="${file#${WORKROOT}/}"
              relfile="${relfile#./}"
              [ -z "$relfile" ] && relfile="$file"

              if [ "$line" -gt 0 ] 2>/dev/null; then
                blame=$(git blame -L ${line},${line} --porcelain -- "$relfile" 2>/dev/null || true)
                author=$(echo "$blame" | awk '/^author /{sub(/^author /,""); print; exit}')
                commitsha=$(echo "$blame" | awk '/^commit /{print $2; exit}')
                summary=$(echo "$blame" | awk '/^summary /{sub(/^summary /,""); print; exit}')
                [ -z "$author" ] && author="(nieznany autor)"
                [ -z "$commitsha" ] && commitsha="(brak SHA)"
                [ -z "$summary" ] && summary="(no summary)"
                echo "${relfile}:${line} [${author}] ${msg}  -- ${summary} (${commitsha})" >> phpstan-annotated.txt
              else
                echo "${relfile}:${line} [brak dokładnej linii] ${msg}" >> phpstan-annotated.txt
              fi
            done < phpstan-flat.tsv
          else
            echo "Brak szczegółowych wiadomości w phpstan-report.json; poniżej nagłówek JSON:" >> phpstan-annotated.txt
            head -n 200 phpstan-report.json >> phpstan-annotated.txt
          fi

          # Wersja skrócona na początek issue
          head -n 80 phpstan-annotated.txt > phpstan-issue-snippet.txt

          # Zbuduj główne body (zawiera krótki snippet)
          {
            echo "Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}";
            echo;
            echo "Errors (annotated, first lines):";
            echo '```';
            cat phpstan-issue-snippet.txt;
            echo '```';
            echo;
            echo "> Poniżej pełny raport (może być podzielony na kilka komentarzy, jeśli bardzo duży).";
          } > issue_body.txt

          # Przygotuj pełną zawartość do wklejenia w komentarze / body
          # Opakuj w blok kodu, żeby było czytelnie
          {
            echo '```';
            cat phpstan-annotated.txt
            echo '```';
          } > full_body.txt

      - name: Check for existing open PHPStan issue
        if: steps.stan.outputs.exitcode != '0'
        id: dup
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          count=$(gh issue list --state open --label "phpstan-error" --limit 100 --json number --jq 'length')
          echo "open_count=$count" >> "$GITHUB_OUTPUT"

      - name: Create or comment (inline full report, chunked if needed)
        if: steps.stan.outputs.exitcode != '0'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # limit GitHub issue/komentarz ~64k; przyjmijmy bezpieczne 55k
          MAX=55000
          size=$(wc -c < full_body.txt | tr -d ' ')
          echo "Full body size: $size bytes"

          if [ "${{ steps.dup.outputs.open_count }}" = "0" ]; then
            # Utwórz nowe issue z krótkim body
            num=$(gh issue create \
              --title "PHPStan errors (scheduled/manual run)" \
              --label "phpstan-error" \
              --body-file issue_body.txt \
              --json number --jq .number)
            echo "issue_number=$num" >> "$GITHUB_OUTPUT"

            # Dołącz pełny raport (jako jeden komentarz albo w kawałkach)
            if [ "$size" -le "$MAX" ]; then
              gh issue comment "$num" --body-file full_body.txt
            else
              split -b ${MAX} -d -a 2 full_body.txt chunk_
              for f in chunk_*; do
                gh issue comment "$num" --body-file "$f"
              done
            fi
          else
            # Komentuj na istniejącym
            num=$(gh issue list --state open --label "phpstan-error" --limit 1 --json number --jq '.[0].number')
            echo "issue_number=$num" >> "$GITHUB_OUTPUT"

            # Najpierw dodaj krótki nagłówek z linkiem do runa
            gh issue comment "$num" --body-file issue_body.txt

            # Potem pełny raport (1 komentarz lub chunkowane)
            if [ "$size" -le "$MAX" ]; then
              gh issue comment "$num" --body-file full_body.txt
            else
              split -b ${MAX} -d -a 2 full_body.txt chunk_
              for f in chunk_*; do
                gh issue comment "$num" --body-file "$f"
              done
            fi
          fi

      - name: Close open PHPStan issues (if any)
        if: steps.stan.outputs.exitcode == '0'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          nums=$(gh issue list --state open --label "phpstan-error" --limit 100 --json number --jq '.[].number')
          if [ -n "$nums" ]; then
            for n in $nums; do
              echo "Zamykam issue #$n (PHPStan green)"
              gh issue close "$n" -c "PHPStan green on workflow run ${{ github.run_id }}"
            done
          else
            echo "Brak otwartych issue do zamknięcia."
          fi

      - name: Fail job if PHPStan failed
        if: steps.stan.outputs.exitcode != '0'
        run: exit 1
